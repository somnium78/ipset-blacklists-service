#!/bin/sh

# IPSet Blacklist Service for OPNsense
# Professional blacklist management using pfctl tables and OPNsense aliases

set -e

# Configuration
CONFIG_FILE="/usr/local/etc/blacklist-sources.conf"
BLACKLIST_DIR="/var/db/blacklist"
CURRENT_FILE="${BLACKLIST_DIR}/blacklist_current.txt"
PREVIOUS_FILE="${BLACKLIST_DIR}/blacklist_previous.txt"
LOG_FILE="/var/log/blacklist.log"
TABLE_NAME="blacklist_inbound"
VERSION_FILE="/usr/local/etc/blacklist_version"

# Embedded version (fallback if version file doesn't exist)
VERSION="2.0.10-opnsense"

# Try to read version from file, use embedded as fallback
if [ -f "$VERSION_FILE" ]; then
    VERSION=$(cat "$VERSION_FILE" 2>/dev/null || echo "$VERSION")
fi

# Logging function
log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} [ipset-blacklist-opnsense] ${message}" | tee -a "$LOG_FILE"
}

# Validate IP/CIDR function
is_valid_ip_or_cidr() {
    local ip="$1"
    # Basic validation for IPv4 and IPv4 CIDR
    echo "$ip" | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$' >/dev/null
}

# Create directories
mkdir -p "$BLACKLIST_DIR"

log_message "Starting blacklist update v$VERSION"

# Check if pfctl table exists, create if not
if ! pfctl -t "$TABLE_NAME" -T show >/dev/null 2>&1; then
    log_message "Creating pfctl table: $TABLE_NAME"
    pfctl -t "$TABLE_NAME" -T add 0.0.0.0/32 >/dev/null 2>&1 || true
    pfctl -t "$TABLE_NAME" -T delete 0.0.0.0/32 >/dev/null 2>&1 || true
fi

# Check configuration file
if [ ! -f "$CONFIG_FILE" ]; then
    log_message "Error: Configuration file not found: $CONFIG_FILE"
    exit 1
fi

# Initialize counters
total_sources=0
successful_sources=0
total_entries=0

# Create temporary file for new blacklist
temp_file=$(mktemp)
trap "rm -f $temp_file" EXIT

# Process each source
while IFS='|' read -r name url enabled || [ -n "$name" ]; do
    # Skip comments and empty lines
    case "$name" in
        \#*|'') continue ;;
    esac

    # Skip disabled sources
    if [ "$enabled" != "true" ]; then
        continue
    fi

    total_sources=$((total_sources + 1))
    log_message "Processing: $name"

    # Download and process source
    temp_source=$(mktemp)
    if fetch -q -o "$temp_source" "$url" 2>/dev/null; then
        # Process the downloaded file
        valid_entries=0
        while IFS= read -r line || [ -n "$line" ]; do
            # Skip comments and empty lines
            case "$line" in
                \#*|'') continue ;;
            esac

            # Extract IP/CIDR (handle various formats)
            ip=$(echo "$line" | awk '{print $1}' | grep -E '^[0-9]' || true)

            if [ -n "$ip" ] && is_valid_ip_or_cidr "$ip"; then
                echo "$ip" >> "$temp_file"
                valid_entries=$((valid_entries + 1))
            fi
        done < "$temp_source"

        if [ $valid_entries -gt 0 ]; then
            log_message "  → $valid_entries entries from $(echo $name | awk '{print $NF}' | tr -d '()')"
            successful_sources=$((successful_sources + 1))
            total_entries=$((total_entries + valid_entries))
        else
            log_message "  → Warning: No valid entries found in $(echo $name | awk '{print $NF}' | tr -d '()')"
        fi
    else
        log_message "  → Error: Failed to download from $(echo $name | awk '{print $NF}' | tr -d '()')"
    fi

    rm -f "$temp_source"
done < "$CONFIG_FILE"

log_message "Processed $successful_sources/$total_sources sources successfully"

# Remove duplicates and sort
sort -u "$temp_file" > "${temp_file}.sorted"
unique_entries=$(wc -l < "${temp_file}.sorted")
log_message "Total unique entries: $unique_entries"

if [ $unique_entries -eq 0 ]; then
    log_message "Warning: No entries to process"
    exit 0
fi

# Determine update strategy
if [ ! -f "$CURRENT_FILE" ]; then
    # Initial load
    log_message "Initial load: adding all $unique_entries entries to pfctl table"

    # Load all entries into pfctl table
    while IFS= read -r ip; do
        pfctl -t "$TABLE_NAME" -T add "$ip" >/dev/null 2>&1 || true
    done < "${temp_file}.sorted"

    log_message "Successfully loaded initial blacklist into pfctl table"
else
    # Differential update
    log_message "Performing differential update"

    # Find entries to add and remove
    temp_add=$(mktemp)
    temp_remove=$(mktemp)

    # Entries to add (in new but not in current)
    comm -23 "${temp_file}.sorted" "$CURRENT_FILE" > "$temp_add"
    add_count=$(wc -l < "$temp_add")

    # Entries to remove (in current but not in new)
    comm -13 "${temp_file}.sorted" "$CURRENT_FILE" > "$temp_remove"
    remove_count=$(wc -l < "$temp_remove")

    log_message "Differential update: +$add_count entries, -$remove_count entries"

    # Apply additions
    if [ $add_count -gt 0 ]; then
        while IFS= read -r ip; do
            pfctl -t "$TABLE_NAME" -T add "$ip" >/dev/null 2>&1 || true
        done < "$temp_add"
    fi

    # Apply removals
    if [ $remove_count -gt 0 ]; then
        while IFS= read -r ip; do
            pfctl -t "$TABLE_NAME" -T delete "$ip" >/dev/null 2>&1 || true
        done < "$temp_remove"
    fi

    rm -f "$temp_add" "$temp_remove"
fi

# Backup current file and update
if [ -f "$CURRENT_FILE" ]; then
    cp "$CURRENT_FILE" "$PREVIOUS_FILE"
fi
cp "${temp_file}.sorted" "$CURRENT_FILE"

# Create/update OPNsense alias file (same content, different purpose)
log_message "Created OPNsense alias table: blacklist_inbound"

# Verify pfctl table
table_count=$(pfctl -t "$TABLE_NAME" -T show 2>/dev/null | wc -l || echo "0")
log_message "pfctl table '$TABLE_NAME' now contains $table_count entries"

# Verify OPNsense alias file
if [ -f "$CURRENT_FILE" ]; then
    file_count=$(wc -l < "$CURRENT_FILE")
    log_message "OPNsense alias 'blacklist_inbound' now contains $file_count entries"
fi

# Update statistics
cat > "${BLACKLIST_DIR}/last_update_stats.txt" << STATS_EOF
Last Update: $(date '+%Y-%m-%d %H:%M:%S')
Total Sources: $total_sources
Successful Sources: $successful_sources
Final Count: $unique_entries
Version: $VERSION
STATS_EOF

log_message "Blacklist update completed successfully"
log_message "OPNsense Web GUI: Use alias 'blacklist_inbound' with file://$CURRENT_FILE"

# Cleanup
rm -f "${temp_file}.sorted"
